title: updateAdAppRequiredPermissions
id: c0d902ba-e4a9-418e-93fe-c3b0c0df65db
creationDate: '2021-08-05'
modificationDate: '2021-08-05'
description: |
  A threat actor might want to update required permissions (delegated or applications) of an Azure AD application. This does not grant permissions consent.
contributors:
- Roberto Rodriguez @Cyb3rWard0g
- MSTIC R&D
ctiReferences:
- https://msrc-blog.microsoft.com/2020/12/21/december-21st-2020-solorigate-resource-center/
attackMappings:
- technique: T1098.002
  tactics:
  - TA0003
platform: Azure
resource:
  url: https://graph.microsoft.com/
  authorization:
    permissionsType: application
    permissions:
    - Application.ReadWrite.All
parameters:
  displayName:
    type: string
    description: The Azure AD application display name.
  resourceSpDisplayName:
    type: string
    description: Display name of the service principal to map/get permissions from (i.e. Microsoft Graph).
  permissionType:
    type: string
    description: Type of permissions assigned. It could of type Delegated or Application.
  permissions:
    type: array
    description: An array of required permissions to assign to the application.
  accessToken:
    type: string
    description: Access token with the right permissions to access and interact with the Azure resource.
executor:
  type: PowerShell
  scriptContent: |
    # Get application to assign permissions to
    $params = @{
      "Method"  = "Get"
      "Uri"     = "https://graph.microsoft.com/v1.0/applications?`$filter=displayName eq '$displayName'"
      "Headers" = $headers
    }
    $AppResults = Invoke-RestMethod @params
    $Application = $AppResults.value[0]
    if ($AppResults.value.Count -ne 1) {
      Write-Error "Found $($AppResults.value.Count) applications with displayName '$($displayName)'"
    }
    # Get Service Principal to retrive permissions from
    $params = @{
      "Method"  = "Get"
      "Uri"     = "https://graph.microsoft.com/v1.0/servicePrincipals?`$filter=displayName eq '$resourceSpDisplayName'"
      "Headers" = $headers
    }
    $ResourceResults = Invoke-RestMethod @params
    $ResourceSvcPrincipal = $ResourceResults.value[0]
    if ($ResourceResults.value.Count -ne 1) {
      Write-Error "Found $($ResourceResults.value.Count) service principals with displayName '$($resourceSpDisplayName)'"
    }
    # Define additional permission variables
    $PropertyType = Switch ($permissionType) {
      'Delegated' { 'oauth2PermissionScopes'}
      'Application' { 'appRoles' }
    }
    $ResourceAccessType = Switch ($permissionType) {
      'Delegated' { 'Scope'}
      'Application' { 'Role' }
    }
    # Retrieve Role Assignments and create 'Resource Access Items' to then generate a 'Required Resources Access' object
    # The 'Required Resource Access object' contains the required permissions that will be assigned to the Azure AD application
    $ResourceAccessItems = @()
    Foreach ($AppPermission in $permissions) {
      $RoleAssignment = $ResourceSvcPrincipal.$PropertyType | Where-Object { $_.Value -eq $AppPermission }
      $ResourceAccessItem = [PSCustomObject]@{
        "id"   = $RoleAssignment.id
        "type" = $ResourceAccessType
      }
      $ResourceAccessItems += $ResourceAccessItem
    }
    # Verify if permissions have been assigned to the application yet
    # Reference: https://github.com/TheCloudScout/devops-auto-key-rotation/blob/main/scripts/Set-addApplicationOwner.ps1
    if ($resourceAccess = ($Application.requiredResourceAccess | Where-Object -FilterScript { $_.resourceAppId -eq $ResourceSvcPrincipal.appId })) {
      Foreach ($item in $ResourceAccessItems) {
        if ($null -eq ($resourceAccess.resourceAccess | Where-Object -FilterScript { $_.type -eq "$ResourceAccessType" -and $_.id -eq $item.id })) {
          $Application.requiredResourceAccess[$Application.requiredResourceAccess.resourceAppId.IndexOf($ResourceSvcPrincipal.appId)].resourceAccess += $item
        }
      }
    }
    else {
      $RequiredResourceAccess = [PSCustomObject]@{
        "resourceAppId"  = $ResourceSvcPrincipal.appId
        "resourceAccess" = $ResourceAccessItems
      }
      # Update/Assign application permissions
      $Application.requiredResourceAccess += $RequiredResourceAccess
    }
    $AppBody = $Application | Select-Object -Property "id", "appId", "displayName", "identifierUris", "requiredResourceAccess"
    $params = @{
      "Method"  = "Patch"
      "Uri"     = "https://graph.microsoft.com/v1.0/applications/$($AppBody.id)"
      "Body"    = $AppBody | ConvertTo-Json -Compress -Depth 99
      "Headers" = $headers
    }
    $updatedApplication = Invoke-WebRequest @params
    if ($updatedApplication.StatusCode -eq 204) {
      "Required permissions were assigned successfully to $($displayName)"
    }
output:
  response:
    type: object